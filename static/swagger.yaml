swagger: '2.0'
info:
  title: "Ecommerce API"
  description: "API to manage ecommerce interactions"
  version: "1.0.0"
host: "127.0.0.1:5000" #working on local host
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
paths:
  /customers/add:
    post:
      tags:
        - Customers
      summary: "Add a new customer"
      description: "Endpoint to add a new customer"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer details"
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        201:
          description: "Customer created"
          schema:
            $ref: "#/definitions/CustomerResponse"
        400:
          description: "Invalid input"

  /customers/:
    get:
      tags:
        - Customers
      summary: "Retrieve all customers"
      description: "Endpoint to retrieve all customers"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Customer"
        404:
          description: "Customers not found"

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: "Retrieve a customer by ID"
      description: "Endpoint to retrieve a customer by ID"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the customer to retrieve"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Customer"
        404:
          description: "Customer not found"

    put:
      tags:
        - Customers
      summary: "Update customer details"
      description: "Endpoint to update customer details"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the customer to update"
        - in: "body"
          name: "body"
          description: "Updated customer details"
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        200:
          description: "Customer updated"
          schema:
            $ref: "#/definitions/Customer"
        400:
          description: "Invalid input"
        404:
          description: "Customer not found"

    delete:
      tags:
        - Customers
      summary: "Delete a customer"
      description: "Endpoint to delete a customer by ID"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the customer to delete"
      responses:
        204:
          description: "Customer deleted"
        404:
          description: "Customer not found"

  /customers/login:
    post:
      tags:
        - Customers
      summary: "Customer login"
      description: "Endpoint for customer authentication"
      parameters:
        - in: "body"
          name: "body"
          description: "Login credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/LoginResponse"
        401:
          description: "Unauthorized"


  /products:
    post:
      tags:
        - Products
      summary: "Add a new product"
      description: "Endpoint to add a new product"
      parameters:
        - in: "body"
          name: "body"
          description: "Product details"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        201:
          description: "Product created"
          schema:
            $ref: "#/definitions/ProductResponse"
        400:
          description: "Invalid input"

    get:
      tags:
        - Products
      summary: "Retrieve all products"
      description: "Endpoint to retrieve all products"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
        404:
          description: "Products not found"

  /products/{id}:
    get:
      tags:
        - Products
      summary: "Retrieve a product by ID"
      description: "Endpoint to retrieve a product by ID"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the product to retrieve"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Product"
        404:
          description: "Product not found"

    put:
      tags:
        - Products
      summary: "Update product details"
      description: "Endpoint to update product details"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the product to update"
        - in: "body"
          name: "body"
          description: "Updated product details"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        200:
          description: "Product updated"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Invalid input"
        404:
          description: "Product not found"

    delete:
      tags:
        - Products
      summary: "Delete a product"
      description: "Endpoint to delete a product by ID"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the product to delete"
      responses:
        204:
          description: "Product deleted"
        404:
          description: "Product not found"

  /orders/{order_id}:
    get:
      tags:
        - Orders
      summary: "Retrieve an order by ID"
      description: "Endpoint to retrieve an order by ID"
      parameters:
        - in: "path"
          name: "order_id"
          required: true
          type: "integer"
          description: "ID of the order to retrieve"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Order"
        404:
          description: "Order not found"

    /cart/add:
    post:
      tags:
        - Cart
      summary: "Add an item to the cart"
      description: "Endpoint to add an item to the cart"
      parameters:
        - in: "body"
          name: "body"
          description: "Details of the item to add to the cart"
          required: true
          schema:
            $ref: "#/definitions/CartItem"
      responses:
        201:
          description: "Item added to cart"
          schema:
            $ref: "#/definitions/CartResponse"
        400:
          description: "Invalid input"

  /cart/{cart_id}/delete/{item_id}:
    delete:
      tags:
        - Cart
      summary: "Remove an item from the cart"
      description: "Endpoint to remove an item from the cart"
      parameters:
        - in: "path"
          name: "cart_id"
          required: true
          type: "integer"
          description: "ID of the cart"
        - in: "path"
          name: "item_id"
          required: true
          type: "integer"
          description: "ID of the item to remove"
      responses:
        204:
          description: "Item removed from cart"
        404:
          description: "Item not found"

  /cart/{id}:
    get:
      tags:
        - Cart
      summary: "View cart contents"
      description: "Endpoint to view the contents of a cart"
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the cart to view"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Cart"
        404:
          description: "Cart not found"

  /cart/empty/{cart_id}:
    delete:
      tags:
        - Cart
      summary: "Empty the cart"
      description: "Endpoint to empty the cart"
      parameters:
        - in: "path"
          name: "cart_id"
          required: true
          type: "integer"
          description: "ID of the cart to empty"
      responses:
        204:
          description: "Cart emptied"
        404:
          description: "Cart not found"

  /cart/checkout/{cart_id}:
    post:
      tags:
        - Cart
      summary: "Proceed to checkout"
      description: "Endpoint to proceed to checkout"
      parameters:
        - in: "path"
          name: "cart_id"
          required: true
          type: "integer"
          description: "ID of the cart to checkout"
      responses:
        200:
          description: "Checkout successful"
        400:
          description: "Invalid input"
        404:
          description: "Cart not found"

definitions:
  Customer:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"

  CustomerResponse:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "integer"
      email:
        type: "string"
      phone:
        type: "string"
      username:
        type: "string"

  LoginPayload:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"

  Product:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"

  ProductResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      price:
        type: "number"
        format: "float"

  Order:
    type: "object"
    properties:
      order_id:
        type: "integer"
      customer_id:
        type: "integer"
      order_date:
        type: "string"
        format: "date-time"
      items:
        type: "array"
        items:
          $ref: "#/definitions/OrderItem"

  OrderItem:
    type: "object"
    properties:
      item_id:
        type: "integer"
      quantity:
        type: "integer"
      price:
        type: "number"
        format: "float"

  CartItem:
    type: "object"
    properties:
      cart_id:
        type: "integer"
      item_id:
        type: "integer"
      quantity:
        type: "integer"

  CartResponse:
    type: "object"
    properties:
      cart_id:
        type: "integer"
      items:
        type: "array"
        items:
          $ref: "#/definitions/CartItem"

  Cart:
    type: "object"
    properties:
      cart_id:
        type: "integer"
      items:
        type: "array"
        items:
          $ref: "#/definitions/CartItem"
      total_price:
        type: "number"
        format: "float"
